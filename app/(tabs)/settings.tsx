import AsyncStorage from "@react-native-async-storage/async-storage";
import * as LocalAuthentication from "expo-local-authentication";
import React, { useState } from "react";
import { Alert, Button, Text, View } from "react-native";

export default function SettingsScreen() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const handleBiometricAuth = async () => {
    try {
      const compatible = await LocalAuthentication.hasHardwareAsync();
      if (!compatible) {
        Alert.alert("–û—à–∏–±–∫–∞", "–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—é.");
        return;
      }

      const enrolled = await LocalAuthentication.isEnrolledAsync();
      if (!enrolled) {
        Alert.alert("–û—à–∏–±–∫–∞", "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.");
        return;
      }

      const supportedTypes = await LocalAuthentication.supportedAuthenticationTypesAsync();

      const supportsFaceID = supportedTypes.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION);
      const supportsFingerprint = supportedTypes.includes(LocalAuthentication.AuthenticationType.FINGERPRINT);

      console.log("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Face ID:", supportsFaceID);
      console.log("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –ø–∞–ª—å—Ü–∞:", supportsFingerprint);

      let result;

      // –ü–æ–ø—ã—Ç–∫–∞ Face ID
      if (supportsFaceID) {
        result = await LocalAuthentication.authenticateAsync({
          promptMessage: "–í–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é Face ID",
          cancelLabel: "–û—Ç–º–µ–Ω–∞",
          disableDeviceFallback: true,
        });

        if (result.success) {
          setIsAuthenticated(true);
          Alert.alert("–£—Å–ø–µ—à–Ω–æ", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ Face ID.");
          return;
        }
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–º –ø–∞–ª—å—Ü–∞
      if (supportsFingerprint) {
        result = await LocalAuthentication.authenticateAsync({
          promptMessage: "–í–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –ø–∞–ª—å—Ü–∞",
          cancelLabel: "–û—Ç–º–µ–Ω–∞",
          disableDeviceFallback: true,
        });

        if (result.success) {
          setIsAuthenticated(true);
          Alert.alert("–£—Å–ø–µ—à–Ω–æ", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞.");
          return;
        }
      }

      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî PIN / –ø–∞—Ä–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      result = await LocalAuthentication.authenticateAsync({
        promptMessage: "–í–≤–µ–¥–∏—Ç–µ PIN / –ø–∞—Ä–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        fallbackLabel: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
        disableDeviceFallback: false,
      });

      if (result.success) {
        setIsAuthenticated(true);
        Alert.alert("–£—Å–ø–µ—à–Ω–æ", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é PIN / –ø–∞—Ä–æ–ª—è.");
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏–∏:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
    }
  };

  const handleLogout = async () => {
    await AsyncStorage.removeItem("userToken");
    setIsAuthenticated(false);
    Alert.alert("–í—ã—Ö–æ–¥", "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.");
  };

  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text style={{ fontSize: 18, marginBottom: 20 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</Text>

      <Button title="–í–æ–π—Ç–∏ —Å Face ID / Touch ID / PIN" onPress={handleBiometricAuth} />

      {isAuthenticated && (
        <View style={{ marginTop: 20 }}>
          <Button title="üö™ –í—ã–π—Ç–∏" color="red" onPress={handleLogout} />
        </View>
      )}
    </View>
  );
}
